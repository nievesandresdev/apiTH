name: Build and Push API Image

on:
  push:
    branches: [ main, test ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout del código
      - name: Checkout
        uses: actions/checkout@v3

      # Crear el archivo .env (si es necesario)
      - name: Create .env file
        run: |
          echo "APP_NAME=TheHoster" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "ASSET_URL='${{ secrets.APP_URL }}'" >> .env

      # Configuración de Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login a GitHub Container Registry
      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # Determinar el nombre de la imagen basado en la rama
      - name: Determine image name based on branch
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "IMAGE_NAME=api" >> $GITHUB_ENV
          else
            echo "IMAGE_NAME=api-test" >> $GITHUB_ENV
          fi

      # Modificar docker-compose.yml dinámicamente (para configurar el tag correcto)
      - name: Update docker-compose.yml with image name
        run: |
          sed -i "s|image: api:latest|image: ghcr.io/th-the-hoster/${{ env.IMAGE_NAME }}:${{ github.run_number }}|" docker-compose.yml

      # Construir la imagen usando docker-compose
      - name: Build Docker image with Docker Compose
        run: docker compose build

      # Empujar la imagen a GHCR
      - name: Push Docker image to GHCR
        run: docker push ghcr.io/th-the-hoster/${{ env.IMAGE_NAME }}:${{ github.run_number }}
