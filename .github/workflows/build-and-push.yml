name: Build and Push API Image

on:
  push:
    branches: [ main, test ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout del código
      - name: Checkout
        uses: actions/checkout@v3

      # Crear el archivo .env (si es necesario)
      - name: Create .env file
        run: |
          echo "APP_NAME=TheHoster" >> .env
          echo "APP_KEY=" >> .env
          echo "PRODUCTION=true" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "BROADCAST_DRIVER=pusher" >> .env
          echo "CACHE_DRIVER=file" >> .env
          echo "FILESYSTEM_DRIVER=s3" >> .env
          echo "QUEUE_CONNECTION=database" >> .env
          echo "SESSION_DRIVER=file" >> .env
          echo "SESSION_LIFETIME=120" >> .env
          echo "MEMCACHED_HOST=127.0.0.1" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PASSWORD=null" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "MAIL_DRIVER=smtp" >> .env
          echo "MAIL_HOST=smtp.gmail.com" >> .env
          echo "MAIL_PORT=587" >> .env
          echo "MAIL_ENCRYPTION=tls" >> .env
          echo "MAIL_FROM_ADDRESS=info@thehoster.io" >> .env
          echo "MAIL_FROM_NAME=TheHoster" >> .env
          echo "MAIL_ADMIN=info@thehoster.es" >> .env
          echo "AWS_DEFAULT_REGION=eu-south-2" >> .env
          echo "AWS_BUCKET=thehosterappbucket" >> .env
          echo "API_SMS_ACTIVE=true" >> .env

          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "APP_DEBUG=${{ secrets.APP_DEBUG_MAIN }}" >> .env
            echo "APP_URL=${{ secrets.APP_URL_MAIN }}" >> .env
            echo "APP_ENV=${{secrets.APP_ENV_MAIN}}" >> .env

            echo "DB_HOST=${{ secrets.DB_HOST_MAIN }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT_MAIN }}" >> .env
            echo "DB_DATABASE=${{ secrets.DB_DATABASE_MAIN }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME_MAIN }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_MAIN }}" >> .env

            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME_MAIN }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD_MAIN }}" >> .env

            echo "X_KEY_API=${{ secrets.X_KEY_API_MAIN }}" >> .env
          else
            echo "APP_DEBUG=${{ secrets.APP_DEBUG_TEST }}" >> .env
            echo "APP_URL=${{ secrets.APP_URL_TEST }}" >> .env
            echo "APP_ENV=${{secrets.APP_ENV_TEST}}" >> .env

            echo "DB_HOST=${{ secrets.DB_HOST_TEST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT_TEST }}" >> .env
            echo "DB_DATABASE=${{ secrets.DB_DATABASE_TEST }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME_TEST }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_TEST }}" >> .env

            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME_TEST }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD_TEST }}" >> .env

            echo "X_KEY_API=${{ secrets.X_KEY_API_TEST }}" >> .env
          fi
          echo "ASSET_URL='${APP_URL}'" >> .env
          echo "LOG_CHANNEL=stack" >> .env
          echo "LOG_LEVEL=debug" >> .env

      # Configuración de Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login a GitHub Container Registry
      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # Determinar el nombre de la imagen basado en la rama
      - name: Determine image name based on branch
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "IMAGE_NAME=api" >> $GITHUB_ENV
          else
            echo "IMAGE_NAME=api-test" >> $GITHUB_ENV
          fi

      # Modificar docker-compose.yml dinámicamente (para configurar el tag correcto)
      - name: Update docker-compose.yml with image name
        run: |
          sed -i "s|image: api:latest|image: ghcr.io/th-the-hoster/${{ env.IMAGE_NAME }}:${{ github.run_number }}|" docker-compose.yml

      # Construir la imagen usando docker-compose
      - name: Build Docker image with Docker Compose
        run: docker compose build

      # Empujar la imagen a GHCR
      - name: Push Docker image to GHCR
        run: docker push ghcr.io/th-the-hoster/${{ env.IMAGE_NAME }}:${{ github.run_number }}
